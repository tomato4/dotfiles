- name: Install k3s
  hosts: server
  become: true
  collections:
    - kubernetes.core
  vars:
    kubeconfig_path: /etc/rancher/k3s/k3s.yaml
    metallb_ip_range: "10.0.0.150-10.0.0.200"
  vars_prompt:
      - name: cloudflare_tunnel_token
        prompt: "Enter Cloudflare tunnel token (leave blank to skip cloudflare setup)"
        private: yes
  tasks:
    - name: Download and install k3s
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server --disable traefik --disable servicelb" sh -
      args:
        creates: /usr/local/bin/k3s  # prevents rerun unless k3s is removed

    - name: Ensure k3s service is enabled and running
      systemd:
        name: k3s
        state: started
        enabled: yes

    - name: Install MetalLB
      k8s:
        state: present
        src: https://raw.githubusercontent.com/metallb/metallb/v0.15.2/config/manifests/metallb-native.yaml
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Wait until MetalLB controller
      k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: metallb-system
        name: controller
        kubeconfig: "{{ kubeconfig_path }}"
      register: metallb_controller
      until: metallb_controller.resources | length > 0 and metallb_controller.resources[0].status.availableReplicas is defined and metallb_controller.resources[0].status.availableReplicas > 0
      retries: 20
      delay: 5

    - name: Configure MetalLB IPAddressPool
      k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: default-address-pool
            namespace: metallb-system
          spec:
            addresses:
              - "{{ metallb_ip_range }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Configure MetalLB L2Advertisement
      k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: default-l2-advertisement
            namespace: metallb-system
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Create ArgoCD namespace
      k8s:
        state: present
        resource_definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: argocd
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Install ArgoCD
      k8s:
        state: present
        src: https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        namespace: argocd
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Apply ArgoCD configuration
      k8s:
        state: present
        src: https://raw.githubusercontent.com/tomato4/homelab/refs/heads/master/applications/argo.yaml
        namespace: argocd
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Install ingress controllers
      k8s:
        state: present
        src: https://raw.githubusercontent.com/tomato4/homelab/refs/heads/master/applications/ingress.yaml
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Create cloudflare namespace
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: cloudflared
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Create Cloudflare credentials secret
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: cloudflared-token
            namespace: cloudflared
          type: Opaque
          stringData:
            token: "{{ cloudflare_tunnel_token }}"
        kubeconfig: "{{ kubeconfig_path }}"
      when: cloudflare_tunnel_token | default('') | length > 0

    - name: Install cloudflared
      k8s:
        namespace: argocd
        state: present
        src: https://raw.githubusercontent.com/tomato4/homelab/refs/heads/master/applications/cloudflared.yaml
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Install Helm
      shell: curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        creates: /usr/local/bin/helm

    - name: Install helm-diff plugin
      command: helm plugin install https://github.com/databus23/helm-diff
      args:
        creates: /root/.local/share/helm/plugins/helm-diff

    - name: Add Helm repo for SealedSecrets
      helm_repository:
        name: sealed-secrets
        repo_url: https://bitnami-labs.github.io/sealed-secrets
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Update Helm repo cache
      command: helm repo update
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Install SealedSecrets controller
      helm:
        name: sealed-secrets
        chart_ref: sealed-secrets/sealed-secrets
        namespace: kube-system
        values:
          fullnameOverride: "sealed-secrets-controller"
        state: present
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Ensure group server exists
      group:
        name: server
        gid: 1002
        state: present

    - name: Create user server
      user:
        name: server
        uid: 1002
        groups: server
        append: true
        create_home: no
        shell: /sbin/nologin
        state: present

    - name: Ensure main user has server group
      user:
        name: glazrtom
        groups: server
        append: true

- name: Mount storage disk
  hosts: server
  become: true
  gather_facts: false
  vars_prompt:
    - name: storage_disk_device
      prompt: "Enter the device path for the storage disk (leave empty to skip this step)"
      private: no

  pre_tasks:
    - name: Skip storage mount if device not provided
      meta: end_play
      when: storage_disk_device | default('') | length == 0

  tasks:
    - name: Get UUID of storage disk
      command: blkid -s UUID -o value {{ storage_disk_device }}
      register: storage_disk_uuid
      changed_when: false
      failed_when: storage_disk_uuid.stdout == ""

    - name: Ensure /mnt/storage exists
      file:
        path: /mnt/storage
        state: directory
        owner: server
        group: server
        mode: '0770'

    - name: Add storage disk to /etc/fstab
      mount:
        path: /mnt/storage
        src: "UUID={{ storage_disk_uuid.stdout }}"
        fstype: auto
        opts: defaults
        state: present

    - name: Mount storage disk
      mount:
        path: /mnt/storage
        src: "UUID={{ storage_disk_uuid.stdout }}"
        fstype: auto
        state: mounted

# TODO this will not work on fresh installation due to missing namespaces. Also it is ugly. Refactor!
- name: Create Windscribe VPN secret in Kubernetes
  hosts: server
  become: true
  gather_facts: false
  vars_prompt:
    - name: vpn_username
      prompt: "Enter Windscribe username (leave empty to skip)"
      private: no
    - name: vpn_password
      prompt: "Enter Windscribe password (leave empty to skip)"
      private: yes

  pre_tasks:
    - name: Skip if no VPN credentials provided
      meta: end_play
      when: vpn_username | default('') | length == 0 or vpn_password | default('') | length == 0

  tasks:
    - name: Create Windscribe-auth secret in media namespace
      k8s:
        state: present
        namespace: media
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: windscribe-auth
          type: Opaque
          stringData:
            username: "{{ vpn_username }}"
            password: "{{ vpn_password }}"
        kubeconfig: "{{ kubeconfig_path }}"

    - name: Create Windscribe-auth secret in transmission namespace
      k8s:
        state: present
        namespace: transmission
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: windscribe-auth
          type: Opaque
          stringData:
            username: "{{ vpn_username }}"
            password: "{{ vpn_password }}"
        kubeconfig: "{{ kubeconfig_path }}"
